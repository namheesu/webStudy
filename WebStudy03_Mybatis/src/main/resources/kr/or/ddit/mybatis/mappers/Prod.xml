<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prod.dao.ProdDAO">

	<sql id="searchFrag">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="not detailCondition.empty">
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodLgu)">
					AND PROD_LGU = #{detailCondition.prodLgu}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodBuyer)">
					AND PROD_BUYER = #{detailCondition.prodBuyer}
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailCondition.prodName)">
					AND INSTR(PROD_NAME, #{detailCondition.prodName}) > 0
				</if>
			</if>
		</trim>
	</sql>

	<select id="selectTotalRecord" resultType="int" parameterType="kr.or.ddit.common.paging.PaginationInfo">
		SELECT COUNT(*)
		FROM PROD
		<include refid="searchFrag"></include>
	</select>

	<select id="selectProdList" resultType="ProdVO" parameterType="kr.or.ddit.common.paging.PaginationInfo">
		SELECT B.*
		FROM (
			SELECT ROWNUM RNUM, A.*
			FROM (
				SELECT
					PROD_ID, PROD_NAME, PROD_LGU
					, PROD_BUYER, PROD_PRICE
					, PROD_MILEAGE
				FROM PROD
				<include refid="searchFrag" />
				ORDER BY PROD_LGU, PROD_ID DESC
			) A
		) B
		<!-- 포맨트데이터 -->
		
		<![CDATA[
			WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
	</select>
	
	<resultMap type="ProdVO" id="prodmap" autoMapping="true">	<!-- id만 있으면   -->
		<id property="prodId" column="PROD_ID"/>	<!-- 식별성을 가지고 있기때문에 id사용 -->
		<association property="lprod" javaType="hashmap">	<!-- lprod는 vo가 없기때문에 오토매핑 사용 안됨. -->
			<id property="lprodGu" column="LPROD_GU"/>
			<result property="lprodNm" column="lprod_nm"/>
		</association>
		<association property="buyer" javaType="BuyerVO" autoMapping="true"> 
			<id property="buyerId" column="BUYER_ID"/>
			<result property="buyerName" column="BUYER_NAME"/>
		</association>
	</resultMap>
	<select id="selectProd" parameterType="string" resultMap="prodmap">
		SELECT
			PROD_ID, PROD_NAME,  PROD_LGU,
		    PROD_BUYER, PROD_COST, PROD_PRICE,
		    PROD_SALE, PROD_OUTLINE, PROD_DETAIL,
		    PROD_IMG, PROD_TOTALSTOCK, PROD_INSDATE,
		    PROD_PROPERSTOCK, PROD_SIZE, PROD_COLOR,
		    PROD_DELIVERY, PROD_UNIT, PROD_QTYIN,
		    PROD_QTYSALE, PROD_MILEAGE
		    , LPROD_GU, LPROD_NM
		    , BUYER_ID, BUYER_NAME, BUYER_ADD1
		    , BUYER_COMTEL, BUYER_CHARGER
		FROM PROD INNER JOIN LPROD ON (PROD_LGU = LPROD_GU)
					INNER JOIN BUYER ON(PROD_BUYER = BUYER_ID)
		WHERE PROD_ID= #{PRODID}
	</select>
	
	<!-- 신규상품등록을 실행하는데 prodId는 기본키이지만 입력받지 않기때문에 insert하면서 key설정까지 같이하는 부분 -->
	<!-- 인라인파라미터를 사용하려면 받아오는 데이터 타입(parameterType)을 지정해줘야함 -->
	<!-- insert로 새로 생성해주는거기 때문에 resultType="string" string을 사용 -->
	<!-- order사용해서 select먼저 실행되고 insert 차례대로 실행된다.  -->
	<insert id="insertProd" parameterType="ProdVO">
		<selectKey order="BEFORE" resultType="string" keyProperty="prodId">
			SELECT #{prodLgu} || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PROD_ID), 5)),0) + 1, 6, '0')
			FROM PROD
			WHERE PROD_LGU = #{prodLgu}
		</selectKey>
			INSERT INTO prod (
			    PROD_ID,
			    PROD_NAME,
			    PROD_LGU,
			    PROD_BUYER,
			    PROD_COST,
			    PROD_PRICE,
			    PROD_SALE,
			    PROD_OUTLINE,
			    PROD_DETAIL,
			    PROD_IMG,
			    PROD_TOTALSTOCK,
			    PROD_INSDATE,
			    PROD_PROPERSTOCK,
			    PROD_SIZE,
			    PROD_COLOR,
			    PROD_DELIVERY,
			    PROD_UNIT,
			    PROD_QTYIN,
			    PROD_QTYSALE,
			    PROD_MILEAGE
			) VALUES (
				#{prodId,jdbcType=VARCHAR}
				, #{prodName,jdbcType=VARCHAR}
				, #{prodLgu,jdbcType=CHAR}
				, #{prodBuyer,jdbcType=CHAR}
				, #{prodCost,jdbcType=NUMERIC}
				, #{prodPrice,jdbcType=NUMERIC}
				, #{prodSale,jdbcType=NUMERIC}
				, #{prodOutline,jdbcType=VARCHAR}
				, #{prodDetail,jdbcType=CLOB}
				, #{prodImg,jdbcType=VARCHAR}
				, #{prodTotalstock,jdbcType=NUMERIC}
				, sysdate
				, #{prodProperstock,jdbcType=NUMERIC}
				, #{prodSize,jdbcType=VARCHAR}
				, #{prodColor,jdbcType=VARCHAR}
				, #{prodDelivery,jdbcType=VARCHAR}
				, #{prodUnit,jdbcType=VARCHAR}
				, #{prodQtyin,jdbcType=NUMERIC}
				, #{prodQtysale,jdbcType=NUMERIC}
				, #{prodMileage,jdbcType=NUMERIC}
			)
	</insert>
	
	<update id="updateProd" parameterType="ProdVO">
		UPDATE PROD
		SET
			PROD_NAME = #{prodName,jdbcType=VARCHAR}
			, PROD_COST = #{prodCost,jdbcType=NUMERIC}
			, PROD_PRICE = #{prodPrice,jdbcType=NUMERIC}
			, PROD_SALE = #{prodSale,jdbcType=NUMERIC}
			, PROD_OUTLINE = #{prodOutline,jdbcType=VARCHAR}
			, PROD_DETAIL = #{prodDetail,jdbcType=CLOB}
			, PROD_IMG = #{prodImg,jdbcType=VARCHAR}
			, PROD_TOTALSTOCK = #{prodTotalstock,jdbcType=NUMERIC}
<!-- 			, PROD_INSDATE = #{prodInsdate,jdbcType=DATE} -->
			, PROD_PROPERSTOCK = #{prodProperstock,jdbcType=NUMERIC}
			, PROD_SIZE = #{prodSize,jdbcType=VARCHAR}
			, PROD_COLOR = #{prodColor,jdbcType=VARCHAR}
			, PROD_DELIVERY = #{prodDelivery,jdbcType=VARCHAR}
			, PROD_UNIT = #{prodUnit,jdbcType=VARCHAR}
			, PROD_QTYIN = #{prodQtyin,jdbcType=NUMERIC}
			, PROD_QTYSALE = #{prodQtysale,jdbcType=NUMERIC}
			, PROD_MILEAGE = #{prodMileage,jdbcType=NUMERIC}
		WHERE
			PROD_ID = #{prodId,jdbcType=VARCHAR}
	</update>
	
</mapper>